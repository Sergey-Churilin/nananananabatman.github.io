!function(o){function e(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return o[t].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};e.m=o,e.c=n,e.d=function(o,n,t){e.o(o,n)||Object.defineProperty(o,n,{configurable:!1,enumerable:!0,get:t})},e.n=function(o){var n=o&&o.__esModule?function(){return o.default}:function(){return o};return e.d(n,"a",n),n},e.o=function(o,e){return Object.prototype.hasOwnProperty.call(o,e)},e.p="",e(e.s=2)}([function(o,e,n){"use strict";function t(o,e){if(!(o instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0}),e.EmptyBlock=void 0;var r=function(){function o(o,e){for(var n=0;n<e.length;n++){var t=e[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(o,t.key,t)}}return function(e,n,t){return n&&o(e.prototype,n),t&&o(e,t),e}}();n(1),e.EmptyBlock=function(){function o(e,n){t(this,o),this.box=document.createElement("div"),this.box.className="block-empty",this.box.style.width=this.box.style.height=(e/n).toFixed(1)+"px"}return r(o,null,[{key:"changeBlockStyle",value:function(o,e){var n=void 0,t=void 0;switch(e){case 0:n="block-i",t="#81F7F3";break;case 1:n="block-j",t="#8181F7";break;case 2:n="block-l",t="#FE9A2E";break;case 3:n="block-o",t="#F3F781";break;case 4:n="block-s",t="#81F781";break;case 5:n="block-t",t="#DA81F5";break;case 6:n="block-z",t="#F78181";break;default:n="block-empty",t="#D8D8D8"}o.className=n,o.style.backgroundColor=t}}]),o}()},function(o,e,n){"use strict";function t(o,e){if(!(o instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function o(o,e){for(var n=0;n<e.length;n++){var t=e[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(o,t.key,t)}}return function(e,n,t){return n&&o(e.prototype,n),t&&o(e,t),e}}();e.GameBoard=function(){function o(){t(this,o),this.numberOfBlocks=this.checkInputValue(),this.gameBoardSize=550,this.minSpeed=1e3,this.speedReduction=500}return r(o,[{key:"checkInputValue",value:function(){var o=+document.querySelector("#number").value;return o>=9&&o<=15?o:9}}]),o}()},function(o,e,n){"use strict";function t(o){if(Array.isArray(o)){for(var e=0,n=Array(o.length);e<o.length;e++)n[e]=o[e];return n}return Array.from(o)}function r(){(y||h)&&(document.body.removeChild(y),clearInterval(h)),w=new k.GameBoard,s=[],p=[],v=parseInt(localStorage.getItem("currentScore"))||0,E=document.getElementById("score"),E.innerText=v||0,x=2500,B=!0,l(),a(),function(){function o(){for(var o=0;o<s.length;++o)!function(o){s[o].map(function(o){return o.className}).includes("block-empty")||(v+=w.numberOfBlocks,E.innerText=v,x=x===w.minSpeed?x:x-w.speedReduction,localStorage.setItem("currentScore",v),p.map(function(o){return i(o.block)}),p.forEach(function(e){return e.block=e.block.filter(function(e){return e.coord[0]!==o})}),p=p.filter(function(o){return 0!==o.block.length}),p.map(function(o){return i(o.block,o.index)}))}(o)}h=setInterval(function(){p.forEach(function(e,n){f(e.block,[1,0])?d(e,0,1):(n===p.length-1&&B&&a(),o())})},x)}(),document.addEventListener("keydown",c)}function c(o){37===o.keyCode&&f(p[p.length-1].block,[0,-1])?d(p[p.length-1],1,-1):39===o.keyCode&&f(p[p.length-1].block,[0,1])&&d(p[p.length-1],1,1)}function l(){y=document.createElement("div"),y.className="game";for(var o=0;o<w.numberOfBlocks;++o){s.push([]);for(var e=0;e<w.numberOfBlocks;++e)s[o][e]=new m.EmptyBlock(w.gameBoardSize,w.numberOfBlocks).box,y.appendChild(s[o][e]),m.EmptyBlock.changeBlockStyle(s[o][e])}document.body.appendChild(y)}function a(){var o=new b.Element,e=o.block.map(function(o){return o.coord[1]}),n=Math.floor((w.numberOfBlocks-Math.max.apply(Math,t(e)))/2);o.block=o.block.map(function(o){return{box:o.box,coord:[o.coord[0],o.coord[1]+n]}}),!function(o){var e=!0;return o.block.forEach(function(o){return e=e&&u(o.coord)}),e}(o)?(document.removeEventListener("keydown",c),o.paintLastElement(),localStorage.removeItem("currentScore"),B=!1,clearInterval(h)):(p.push(o),i(p[p.length-1].block,p[p.length-1].index))}function u(o){try{return"block-empty"===s[o[0]][o[1]].className}catch(o){return!1}}function i(o,e){o.map(function(o){m.EmptyBlock.changeBlockStyle(s[o.coord[0]][o.coord[1]],e)})}function d(o,e,n){i(o.block),o.block.map(function(o){return o.coord[e]+=n}),i(o.block,o.index)}function f(o,e){var n=o.map(function(o){return[o.coord[0]+e[0],o.coord[1]+e[1]]}),t=!0;return n.forEach(function(e){o.map(function(o){return o.coord.toString()}).includes(e.toString())||(t=t&&u(e))}),t}var b=n(3),m=n(0),k=n(1);document.querySelector("#start").addEventListener("click",r);var s=void 0,p=void 0,y=void 0,h=void 0,v=void 0,E=void 0,x=void 0,B=void 0,w=void 0},function(o,e,n){"use strict";function t(o,e){if(!(o instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0}),e.Element=void 0;var r=function(){function o(o,e){for(var n=0;n<e.length;n++){var t=e[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(o,t.key,t)}}return function(e,n,t){return n&&o(e.prototype,n),t&&o(e,t),e}}(),c=n(0),l=[[{coord:[0,0],box:new c.EmptyBlock},{coord:[0,1],box:new c.EmptyBlock},{coord:[0,2],box:new c.EmptyBlock},{coord:[0,3],box:new c.EmptyBlock}],[{coord:[0,0],box:new c.EmptyBlock},{coord:[0,1],box:new c.EmptyBlock},{coord:[0,2],box:new c.EmptyBlock},{coord:[1,2],box:new c.EmptyBlock}],[{coord:[0,0],box:new c.EmptyBlock},{coord:[0,1],box:new c.EmptyBlock},{coord:[0,2],box:new c.EmptyBlock},{coord:[1,0],box:new c.EmptyBlock}],[{coord:[0,0],box:new c.EmptyBlock},{coord:[0,1],box:new c.EmptyBlock},{coord:[1,0],box:new c.EmptyBlock},{coord:[1,1],box:new c.EmptyBlock}],[{coord:[0,1],box:new c.EmptyBlock},{coord:[0,2],box:new c.EmptyBlock},{coord:[1,0],box:new c.EmptyBlock},{coord:[1,1],box:new c.EmptyBlock}],[{coord:[0,0],box:new c.EmptyBlock},{coord:[0,1],box:new c.EmptyBlock},{coord:[0,2],box:new c.EmptyBlock},{coord:[1,1],box:new c.EmptyBlock}],[{coord:[0,0],box:new c.EmptyBlock},{coord:[0,1],box:new c.EmptyBlock},{coord:[1,1],box:new c.EmptyBlock},{coord:[1,2],box:new c.EmptyBlock}]];e.Element=function(){function o(){t(this,o),this.index=Math.floor(7*Math.random()),this.block=l[this.index]}return r(o,[{key:"paintLastElement",value:function(){var o=this;this.block.map(function(e){return c.EmptyBlock.changeBlockStyle(e.box.box,o.index)})}}]),o}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,